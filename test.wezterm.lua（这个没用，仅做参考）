-- Path: ~/.config/wezterm/wezterm.lua
-- github.com/riverify
-- This is a configuration file for wezterm, a GPU-accelerated terminal emulator for modern workflows.

local wezterm = require("wezterm")

config = wezterm.config_builder()

config = {
    default_prog = { "powershell.exe" },
	launch_menu = {},
	tab_bar_at_bottom = true,
    automatically_reload_config = true,
    enable_tab_bar = false,
    hide_tab_bar_if_only_one_tab = true,    -- Hide the tab bar when there is only one tab
	enable_scroll_bar = true,
    window_close_confirmation = "NeverPrompt",
    window_decorations = "TITLE | RESIZE", -- disable the title bar but enable the resizable border
    font = wezterm.font("JetBrains Mono", { weight = "Bold" }),
    font_size = 13,
    color_scheme = "Nord (Gogh)",
    default_cursor_style = 'BlinkingBlock',
    macos_window_background_blur = 25, -- Enable window background blur on macOS
	keys = {
        {key="n", mods="CTRL", action=wezterm.action{SpawnTab="CurrentPaneDomain"}},
    },
    background = {
        {
            source = {
                File = "D:\\WezTerm\\img\\asdasdasd.jpg", -- 替换为你的图片路径
            },
            width = "100%",
            height = "100%",
            opacity = 0.9, -- 设置为 1.0 时不透明，0.0 时完全透明
        },
    },
    window_padding = {
        left = 3,
        right = 3,
        top = 0,
        bottom = 0,
    },
    initial_rows = 30,
    initial_cols = 100,
}
if wezterm.target_triple == "x86_64-pc-windows-msvc" then
    -- config.term = "" -- Set to empty so FZF works on windows
    -- config.term = "xterm"  -- fix bug in command "git log" with "terminal is not fully functional" or delete this term = "xxxx" (using default term value)

    table.insert(config.launch_menu, {
        label = "Command Prompt",
        args = {"cmd.exe"}
    })
    table.insert(config.launch_menu, {
        label = "PowerShell 5",
        args = {"powershell.exe", "-NoLogo"}
    })
    table.insert(config.launch_menu, {
        label = "PowerShell 7",
        args = {"pwsh.exe", "-NoLogo"}
    })

    table.insert(config.launch_menu, {
        label = "Anaconda PowerShell Prompt",
        args = {"pwsh", "-NoLogo", "-NoExit", "-ExecutionPolicy", "Bypass", "-Command",
                "& 'C:\\ProgramData\\anaconda3\\shell\\condabin\\conda-hook.ps1' ; conda activate 'C:\\ProgramData\\anaconda3' "}
    })

    table.insert(config.launch_menu, {
        label = "VS Command Prompt 2022 (PowerShell 7)",
        args = {"pwsh", "-NoLogo", "-NoExit", "-ExecutionPolicy", "Bypass", "-NoProfile", "-Command",
                " & 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Common7\\Tools\\Launch-VsDevShell.ps1'"}
    })

    table.insert(config.launch_menu, {
        label = "Default WSL Command Prompt",
        args = {"wsl"}
    })

    -- table.insert(config.launch_menu, {
    --     label = "VS PowerShell 2022",
    --     args = {"powershell", "-NoLogo", "-NoExit", "-Command", "devps 17.0"}
    -- })
    -- table.insert(config.launch_menu, {
    --     label = "VS PowerShell 2019",
    --     args = {"powershell", "-NoLogo", "-NoExit", "-Command", "devps 16.0"}
    -- })
    -- table.insert(config.launch_menu, {
    --     label = "VS Command Prompt 2022",
    --     args = {"powershell", "-NoLogo", "-NoExit", "-Command", "devcmd 17.0"}
    -- })
    -- table.insert(config.launch_menu, {
    --     label = "VS Command Prompt 2019",
    --     args = {"powershell", "-NoLogo", "-NoExit", "-Command", "devcmd 16.0"}
    -- })

    -- Enumerate any WSL distributions that are installed and add those to the menu
    local success, wsl_list, wsl_err = wezterm.run_child_process({"wsl", "-l"})
    -- `wsl.exe -l` has a bug where it always outputs utf16:
    -- https://github.com/microsoft/WSL/issues/4607
    -- So we get to convert it
    wsl_list = wezterm.utf16_to_utf8(wsl_list)

    for idx, line in ipairs(wezterm.split_by_newlines(wsl_list)) do
        -- Skip the first line of output; it's just a header
        if idx > 1 then
            -- Remove the "(Default)" marker from the default line to arrive at the distribution name on its own

            -- For English Users, the default line:
            -- local distro = line:gsub(" %(Default%)", "")
            
            -- For Chinese User,
            local distro = line:gsub(" %(默认%)", "")

            -- Add an entry that will spawn into the distro with the default shell
            table.insert(config.launch_menu, {
                label = distro .. " (WSL default shell)",
                args = {"wsl", "--distribution", distro}
            })

            -- Here's how to jump directly into some other program; in this example
            -- its a shell that probably isn't the default, but it could also be
            -- any other program that you want to run in that environment
            -- table.insert(config.launch_menu, {
            --     label = distro .. " (WSL zsh login shell)",
            --     args = { "wsl", "--distribution", distro, "--exec", "/bin/zsh", "-l" },
            -- })
        end
    end
else
    -- Not a windows environment
    table.insert(config.launch_menu, {
        label = "fish",
        args = {"fish", "-l"} -- "-l" for login shell 
    })

    table.insert(config.launch_menu, {
        label = "zsh",
        args = {"zsh", "-l"}
    })
end

-- get the current run programs for display on tab bar
-- Equivalent to POSIX basename(3)
-- Given "/foo/bar" returns "bar"
-- Given "c:\\foo\\bar" returns "bar"
function Basename(s)
    return string.gsub(s, "(.*[/\\])(.*)", "%2")
end

wezterm.on("format-tab-title", function(tab, tabs, panes, config, hover, max_width)
    local pane = tab.active_pane
    local title = Basename(pane.foreground_process_name)
    return {{
        Text = " " .. title .. " "
    }}
end)

return config